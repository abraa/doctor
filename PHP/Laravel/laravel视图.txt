使用一个Blade布局
@extends('layouts.master')

@section('sidebar')
    @parent

    <p>This is appended to the master sidebar.</p>
@stop

@section('content')
    <p>This is my body content.</p>
@stop
注意视图中片段只是简单的替换其extend的Blade布局中相应片段。通过在模板片段中使用@parent指令，布局的内容可以包含一个子视图，这样你就可以在布局片段中添加诸如侧边栏、底部信息等内容。

If标签
@if (count($records) === 1)
    I have one record!
@elseif (count($records) > 1)
    I have multiple records!
@else
    I don't have any records!
@endif

@unless (Auth::check())
    You are not signed in.
@endunless


循环
@for ($i = 0; $i < 10; $i++)
    The current value is {{ $i }}
@endfor

@foreach ($users as $user)
    <p>This is user {{ $user->id }}</p>
@endforeach

@while (true)
    <p>I'm looping forever.</p>
@endwhile


包含子视图
@include('view.name')
你也可以传递数组数据到被包含的视图

@include('view.name', array('some'=>'data'))


覆盖片段
如果想覆盖一整个片段，可以使用overwrite指令：

@extends('list.item.container')

@section('list.item.content')
    <p>This is an item of type {{ $item->type }}</p>
@overwrite


输出多语言
@lang('language.line')

@choice('language.line', 1)


注释
{{-- This comment will not be in the rendered HTML --}}


扩展Blade
Blade允许用户定义自己的控制结构。当一个Blade文件被编译后，会调用用户自定义的扩展，用来处理视图内容，从简单的str_replace操作，到很复杂的表达式，总之，你可以做任何事情。

Blade的编译器附带了帮助函数createMatcher和createPlainMatcher，这两个函数可以生成自定义指令。

createPlainMatcher函数主要用于没有参数传递的指令，类似@endif和@stop，而createMatcher则用于那些有参数传递的指令。

下面的例子创建@datetime($var)指令，它只是简单的对$var调用->format()方法：

Blade::extend(function($view, $compiler)
{
    $pattern = $compiler->createMatcher('datetime');

    return preg_replace($pattern, '$1<?php echo $2->format('m/d/Y H:i'); ?>', $view);
});